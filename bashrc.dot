# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 

# base-files version 4.1-1

# ~/.bashrc: executed by bash(1) for interactive shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bashrc

# Modifying /etc/skel/.bashrc directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bashrc) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bashrc file

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

# Shell Options
#
# See man bash for more options...
#
# Don't wait for job termination notification
# set -o notify
#
# Don't use ^D to exit
# set -o ignoreeof
#
# Use case-insensitive filename globbing
# shopt -s nocaseglob
#
# Make bash append rather than overwrite the history on disk
# shopt -s histappend
#
# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
# shopt -s cdspell

# Completion options
#
# These completion tuning parameters change the default behavior of bash_completion:
#
# Define to access remotely checked-out files over passwordless ssh for CVS
# COMP_CVS_REMOTE=1
#
# Define to avoid stripping description in --option=description of './configure --help'
# COMP_CONFIGURE_HINTS=1
#
# Define to avoid flattening internal contents of tar files
# COMP_TAR_INTERNAL_PATHS=1
#
# Uncomment to turn on programmable completion enhancements.
# Any completions you add in ~/.bash_completion are sourced last.
# [[ -f /etc/bash_completion ]] && . /etc/bash_completion

# for macports bash-completion
if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
    . /opt/local/etc/profile.d/bash_completion.sh
fi

# History Options
#
# Don't put duplicate lines in the history.
# export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
#
# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well
#
# Whenever displaying the prompt, write the previous line to disk
# export PROMPT_COMMAND="history -a"
#PS1="\[\e]2;\u@\H \w\a\e[32;1m\]$\[\e[0m\] "
PS1="\$ "

# RPROMPT setting
function __command_rprompt() {
  local rprompt="[ $(dirs)]"
    local num=$(($COLUMNS - ${#rprompt} - 2))
    printf "%${num}s$rprompt\\r" ''
}
PROMPT_COMMAND=__command_rprompt

# Aliases
#
# Some people use a different file for aliases
# if [ -f "${HOME}/.bash_aliases" ]; then
#   source "${HOME}/.bash_aliases"
# fi
#
# Some example alias instructions
# If these are enabled they will be used instead of any instructions
# they may mask.  For example, alias rm='rm -i' will mask the rm
# application.  To override the alias instruction use a \ before, ie
# \rm will call the real rm not the alias.
#
# Interactive operation...
# alias rm='rm -i'
# alias cp='cp -i'
# alias mv='mv -i'
#
# Default to human readable figures
# alias df='df -h'
# alias du='du -h'
#
# Misc :)
# alias less='less -r'                          # raw control characters
# alias whence='type -a'                        # where, of a sort
alias grep='grep --color'                     # show differences in colour
alias egrep='egrep --color=auto'              # show differences in colour
alias fgrep='fgrep --color=auto'              # show differences in colour
#
# Some shortcuts for different directory listings
# alias ls='ls -hF --color=tty'                 # classify files in colour
# alias dir='ls --color=auto --format=vertical'
# alias vdir='ls --color=auto --format=long'
# alias ll='ls -l'                              # long list
# alias la='ls -A'                              # all but . and ..

# ls settings
alias ls='ls -CF --color=auto'

alias more="\less '-X -r -i -E -P?f--More-- (%pb\%):--More--.'"
alias less="more"

alias cd='cd '
alias '...'='../..'
alias '....'='../../..'

# vim & editor settings
if [ -d "/Applications/MacVim.app/Contents/MacOS" ]; then
  # MacVim Alias
  alias vim='/Applications/MacVim.app/Contents/MacOS/Vim'
  alias vi='/Applications/MacVim.app/Contents/MacOS/Vim'
  alias view='/Applications/MacVim.app/Contents/MacOS/Vim'
  alias vimdiff='/Applications/MacVim.app/Contents/MacOS/Vim'
  if [ "$EDITOR" = "" ]; then
    export EDITOR='/Applications/MacVim.app/Contents/MacOS/Vim'
  fi
else
  if [ "$EDITOR" = "" ]; then
    if [ -x /usr/local/bin/view ]; then
      export EDITOR="/usr/local/bin/view"
      alias view="/usr/local/bin/view"
    elif [ -x /usr/bin/view ]; then
      export EDITOR="/usr/bin/view"
      alias view="/usr/bin/view"
    fi
  fi
fi

# Umask
#
# /etc/profile sets 022, removing write perms to group + others.
# Set a more restrictive umask: i.e. no exec perms for others:
umask 027
# Paranoid: neither group nor others have any perms:
# umask 077

# Functions
#
# Some people use a different file for functions
# if [ -f "${HOME}/.bash_functions" ]; then
#   source "${HOME}/.bash_functions"
# fi
#
# Some example functions:
#
# a) function settitle
# settitle () 
# { 
#   echo -ne "\e]2;$@\a\e]1;$@\a"; 
# }
# 
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping, 
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func ()
# {
#   local x2 the_new_dir adir index
#   local -i cnt
# 
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
# 
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
# 
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
# 
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
# 
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
# 
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
# 
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
# 
#   return 0
# }
# 
# alias cd=cd_func
#

# mac ports development settings.
if [ -x /opt/local/bin/port ]; then
  export PORTS_HOME=/opt/local
  export PATH=$PORTS_HOME/bin:$PORTS_HOME/sbin:$PORTS_HOME/libexec/gnubin:$PATH
  export MANPATH=$PORTS_HOME/man:$MANPATH
  export DISPLAY=:0.0
  # ランタイムライブラリの場所 (for dyld)
  #     By default, it is set to $(HOME)/lib:/usr/local/lib:/lib:/usr/lib.
  # MacPorts のために DYLD_LIBRARY_PATH を使ってはいけない理由
  #     http://apribase.net/2010/11/13/macports-dyld_library_path/
  export DYLD_FALLBACK_LIBRARY_PATH=.:$PORTS_HOME/lib:$DYLD_FALLBACK_LIBRARY_PATH
  # フレームワークの場所 (for dyld)
  #     By default, it is set to /Library/Frameworks:/Network/Library/Frameworks:/System/Library/Frameworks
  DYLD_FALLBACK_FRAMEWORK_PATH=$PORTS_HOME/Library/Frameworks:$DYLD_FALLBACK_FRAMEWORK_PATH
fi

# local command alias.
if [ -x ~/bin/s2print ]; then
  alias h='s2print ~/server_name'
fi

# rbenv configuration
if [ -d "${HOME}/.rbenv/bin" ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi
alias be='bundle exec'
alias bu='bundle update'
alias bi='bundle install'

# plenv configuration.
if [ -d "${HOME}/.plenv/bin" ]; then
  export PATH="$HOME/.plenv/bin:$PATH"
  eval "$(plenv init -)"
fi

# nodenv configuration
if [ -d "${HOME}/.nodenv/bin" ]; then
  export PATH="$HOME/.nodenv/bin:$PATH"
  eval "$(nodenv init -)"
fi

# pyenv configuration
if [ -d "${HOME}/.pyenv/bin" ]; then
  export PATH="$HOME/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
fi

# tmuxinator configuration.
#[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

# php configuration
#export PATH="$HOME/bin/vendor/bin:$PATH"

# pager
export LESSCHARSET=utf-8
export PAGER="\less '-X -r -i -E -P?f--More-- (%pb\%):--More--.'"

# pkg-config setting
if [ -d "/lib/pkgconfig" ]; then
  export PKG_CONFIG_PATH="/lib/pkgconfig"
fi

# git settings
if [ -f /opt/local/share/git/contrib/completion/git-completion.bash ]; then
  source /opt/local/share/git/contrib/completion/git-completion.bash
  source /opt/local/share/git/contrib/completion/git-prompt.sh
  GIT_PS1_SHOWDIRTYSTATE=true
  export PS1='$(__git_ps1)\$ '
elif [ -f ~/bin/git-completion.bash ]; then
  source ~/bin/git-prompt.sh
  source ~/bin/git-completion.bash
  GIT_PS1_SHOWDIRTYSTATE=true
  export PS1='$(__git_ps1)\$ '
fi
alias g='git'

# go settings.
if [ -d "/opt/local/go" ]; then
  export GOPATH=$HOME/go
  export PATH=$GOPATH/bin:$PATH
fi
if [ -d "/usr/local/go" ]; then
  export GOPATH=$HOME/go
  export PATH=$GOPATH/bin:/usr/local/go/bin:$PATH
fi

# sdk man settings.
if [ -d "${HOME}/.sdkman" ]; then
  export SDKMAN_DIR="${HOME}/.sdkman"
  [[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"
fi

# aws sam cli settings.
if [ -d "${HOME}/.local/bin" ]; then
  export PATH=${HOME}/.local/bin:$PATH
fi

# enable kubeadm completion
if [ -x /usr/bin/kubeadm ] || [ -x /usr/local/bin/kubeadm ]; then
  source <(kubeadm completion bash)
fi

# enable kubectl completion
if [ -x /usr/bin/kubectl ] || [ -x /usr/local/bin/kubectl ]; then
  source <(kubectl completion bash)
fi

# flutter settings
if [ -d "${HOME}/dev/flutter/bin" ]; then
  export PATH=${PATH}:${HOME}/dev/flutter/bin
fi

# android studio(command line tools) settings
if [ -d "${HOME}/Android/SDK/cmdline-tools/latest/bin" ]; then
  export ANDROID_HOME=${HOME}/Android/SDK
  export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/latest/bin
fi

# adb settings
if [ ! "${ANDROID_HOME}" = "" ] && [ -d "${ANDROID_HOME}/platform-tools" ]; then
  export PATH=$PATH:${ANDROID_HOME}/platform-tools
  # Settings for connecting adb to the Windows side in case of WSL2.
  WINDOWS_IP=$(cat /etc/resolv.conf | grep nameserver | tail -1 | cut -d' ' -f2)
  if [ ! "${WINDOWS_IP}" = "" ] && [[ "$(uname -r)" =~ "WSL2" ]]; then
    export ADB_SERVER_SOCKET=tcp:$WINDOWS_IP:5037
  fi
fi

# IntelliJ IDEA settings
if [ -d "/Applications/IntelliJ IDEA.app/Contents/MacOS" ]; then
  export PATH=$PATH:/Applications/IntelliJ\ IDEA.app/Contents/MacOS
  alias i='idea'
fi

# VimWiki settings
wiki () {
  if [[ $# == 0 ]]; then
    vim +"VimwikiIndex"
  elif [[ $1 == "daily" ]]; then
    message="daily commit and push: `date '+%Y-%m-%d'`"
    git -C ~/vimwiki/ add .
    git -C ~/vimwiki/ commit -m "$message"
    git -C ~/vimwiki/ push
  else
    subcommand=$1
    shift
    params=''
    for param in "$@"
    do
      if [[ $param == *' '* ]]; then
        params="${params} \"${param}\""
      else
        params="${params} ${param}"
      fi
    done
    if [[ $params == '' ]]; then
      git -C ~/vimwiki/ $subcommand
    else
      eval git -C ~/vimwiki/ $subcommand "$params"
    fi
  fi
}

# fzf setting
if [ -x "/opt/local/bin/fzf" ]; then
  eval "$(fzf --bash)"
fi
if [ -x "/usr/bin/fzf" ]; then
  eval "$(fzf --bash)"
fi
# fzf-tab-completion
# cf. https://github.com/lincheney/fzf-tab-completion
if [ -f ~/bin/fzf-bash-completion.sh ]; then
  source ~/bin/fzf-bash-completion.sh
  bind -x '"\t": fzf_bash_completion'
fi

# docker completion settings
if [ -f /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion ]; then
  source /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion
fi
if [ -f /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion ]; then
  source /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion
fi
