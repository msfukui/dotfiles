"========================================
" .vim.plugin
" author: m.fukui
"========================================

"----------------------------------------
" 各種プラグイン設定
"----------------------------------------

filetype off

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#begin(expand('~/.vim/bundle/'))
endif

" プラグイン管理を行う。
NeoBundle 'Shougo/neobundle.vim'

" 非同期実行を可能にする。
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
  \   'windows' : 'make -f make_mingw32.mak',
  \   'cygwin' : 'make -f make_cygwin.mak',
  \   'mac' : 'make -f make_mac.mak',
  \   'unix' : 'make -f make_unix.mak',
  \ },
\ }

" オートコンプリートを有効にする。
" NeoBundle 'Shougo/neocomplete'
" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_auto_close_preview = 1
" let g:neocomplete#enable_smart_case = 1
" let g:neocomplete#sources#syntax#min_keyword_length = 3

" unite.vim
NeoBundle 'Shougo/unite.vim'

" colorscheme 'molokai'
NeoBundle 'tomasr/molokai'
" colorscheme 'solarized'
NeoBundle 'altercation/vim-colors-solarized'
" colorscheme 'jellybeans'
NeoBundle 'nanotech/jellybeans.vim'
" colorscheme 'vim-hybrid'
NeoBundle 'w0ng/vim-hybrid'

" ステータスラインをかっこよくする。
"NeoBundle 'alpaca-tc/alpaca_powertabline'
"NeoBundle 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim' }
"let g:Powerline_theme='solarized'
"let g:Powerline_colorscheme='solarized'
"NeoBundle 'Lokaltog/vim-powerline'
"NeoBundle 'bling/vim-airline'
NeoBundle 'itchyny/lightline.vim'
let g:lightline = {
  \ 'colorscheme': 'jellybeans',
\ }

" NERDTree （エクスプローラ）
"NeoBundle 'scrooloose/nerdtree'

" プロジェクト管理
NeoBundle 'project.tar.gz'
" ファイルが選択されたらウインドウを閉じる。
:let g:proj_flags = "imstc"
" \P でプロジェクトをトグルで開閉する。
:nmap <silent> <Leader>P <Plug>ToggleProject
" 最初からディレクトリを全部展開した状態にする。
autocmd BufAdd .vimprojects silent! %foldopen!

" smartchr （キー入力補完）
NeoBundle 'kana/vim-smartchr'
inoremap <expr> = smartchr#loop(' = ', ' == ', ' === ', '=')
" inoremap <expr> + smartchr#loop(' + ', ' += ', '+')
" inoremap <expr> - smartchr#loop(' - ', ' -= ', '-')

" tcomment（コメントアウトの簡略化）
NeoBundle 'tomtom/tcomment_vim'

" Smarty のシンタックスハイライト
"NeoBundle 'sifue/smarty.vim'

" Ruby on Rails 支援
NeoBundle 'rails.vim'

" Ruby on Rails 支援その２
" database.yml 読み込んで :Select * from xxx とかできる。
" ref: http://qiita.com/items/57e726312ffe47592867
"NeoBundle 'dbext.vim'

" Quickrun
NeoBundle 'thinca/vim-quickrun'

" EasyMotion
" 移動先のハイライト表示を行う。
NeoBundle 'Lokaltog/vim-easymotion'

" Markdown 記法のハイライト表示
NeoBundle 'plasticboy/vim-markdown'
" 開いた時の folding を無効に。
let g:vim_markdown_folding_disabled=1

" 指定したURLをブラウザで立ち上げる。
NeoBundle 'tyru/open-browser.vim'

" ctags を自動実行する。
NeoBundle 'alpaca-tc/alpaca_tags'

let g:alpaca_tags#ctags_bin = '/usr/bin/ctags'
let g:alpaca_tags#config = {
\ '_'   : '-R --sort=yes --languages=+Ruby --languages=-css,scss,html',
\ 'js'  : '--languages=+js',
\ 'ruby': '--languages=+Ruby',
\ }
augroup AlpacaTagsAuto
  autocmd!
  if exists(':AlpacaTags')
    autocmd BufWritePost Gemfile AlpacaTagsBundle
    autocmd BufEnter * AlpacaTagsSet
    autocmd BufWritePost * AlpacaTagsUpdate
  endif
augroup END

" unite.vim の 設定。(tt とすると Unite を起動。)
nnoremap <silent><expr>tt ':Unite tags -horizontal -buffer-name=tags -input='.expand("<cword>").'<CR>'

"
" CoffeeScript 周りの設定。
"
" syntax high-light + auto-compile
NeoBundle 'kchmck/vim-coffee-script'
" coloring indents
NeoBundle 'Yggdroot/indentLine'
let g:indentLine_color_term=239
let g:indentLine_char='|'
let g:indentLine_fileType=['coffee','ruby','haml','css','scss','javascript','typescript','python','php','c','cpp']
" js BDD tools
"NeoBundle 'claco/jasmine.vim'

NeoBundle 'scrooloose/syntastic'
" check ruby syntax.
let g:syntastic_ruby_checkers = ['rubocop']
" check xml syntax.
let g:syntastic_xml_checkers = ['xmllint']
" check java syntax.
let g:syntastic_java_javac_config_file_enabled = 1
let g:syntastic_java_javac_config_file = "$HOME/.syntastic_javac_config"
" check java checkstyle settings.
let g:syntastic_java_checkstyle_classpath = "$HOME/java/checkstyle/checkstyle-*-all.jar"
" check golang syntax.
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
" check when only saving files.
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
" active mode when only ruby files.
let g:syntastic_mode_map = { "mode": "passive",
                            \"active_filetypes": ["ruby","xml","java","groovy","go","typescript"],
                            \"passive_filetypes": [] }
" check TypeScript syntax
"let g:syntastic_typescript_checks=['tsc','tslint']
"function! FindTypescriptRoot()
"    return fnamemodify(findfile('tsconfig.json', './;'), ':h')
"endfunction
"let g:syntastic_typescript_tsc_args=['-p', FindTypescriptRoot()]
"let g:syntastic_typescript_tsc_fname = ''
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi']

" Vue components syntax highlight.
NeoBundle 'posva/vim-vue'

" TypeScript support.
NeoBundle 'leafgarland/typescript-vim'
NeoBundle 'Quramy/tsuquyomi'
autocmd BufRead, BufNewFile *.ts setfiletype typescript

" golang support.
NeoBundle 'fatih/vim-go'
" highlight  
let g:go_hightlight_functions = 1
let g:go_hightlight_methods = 1
let g:go_hightlight_structs = 1
let g:go_hightlight_interfaces = 1
let g:go_hightlight_operators = 1
let g:go_hightlight_build_constraints = 1
" display to infomation.
let g:go_auto_type_info = 1
set updatetime=100
" :GoAlternate alias
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')

" showtime.vim
NeoBundle 'thinca/vim-showtime'

" pluntuml syntax highlight & :make
NeoBundle 'aklt/plantuml-syntax'
let g:plantuml_executable_script='~/bin/plantuml'

" HELP ドキュメントの日本語化
NeoBundle 'vim-jp/vimdoc-ja'

if has('vim_starting')
  call neobundle#end()
endif

filetype plugin indent on
