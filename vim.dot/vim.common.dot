"========================================
" ~/.vim/.vim.common
" author: m.fukui
"========================================

"----------------------------------------
" 言語、文字コード、ファイルフォーマットの設定
"----------------------------------------

set termencoding=utf-8
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932
set fileformats=unix,dos,mac

"----------------------------------------
" help言語設定
"----------------------------------------

" 英語は書かなくても検索対称にしてくれる。
" 事前に日本語ヘルプのセットアップが必要。
set helplang=ja

"----------------------------------------
" syntax color の設定
"----------------------------------------

set t_Co=256
syntax on

"--
" solarized の場合
"--
set background=dark
let g:solarized_termcolors=256

" I use xterm-256color as my terminfo on tmux 1.7 & Terminal.app on OS X Lion, so enable termtrans by manually.
" see https://github.com/altercation/vim-colors-solarized
let g:solarized_termtrans=1

"colorscheme solarized
"hi Normal     ctermbg=none ctermfg=lightgray
"hi Comment    ctermfg=darkgray
"hi LineNr     ctermbg=none ctermfg=darkgray
"hi SpecialKey ctermbg=none ctermfg=black
"hi FoldColumn ctermbg=none ctermfg=darkgreen

" 全角空白文字をハイライトする
scriptencoding utf-8
augroup highlightIdegraphicSpace
  autocmd!
  autocmd ColorScheme * highlight IdeographicSpace term=underline ctermbg=DarkMagenta guibg=DarkMagenta
  autocmd VimEnter,WinEnter * match IdeographicSpace /　/
augroup END
highlight IdeographicSpace term=underline ctermbg=DarkMagenta guibg=DarkMagenta

"--
" molokai の場合
"--
"colorscheme molokai

"--
" jellybeans の場合
"--
colorscheme jellybeans

"----------------------------------------
" 画面表示の設定
"----------------------------------------

" スプラッシュ(起動時のメッセージ)を表示しない
set shortmess+=I
" タイトルを非表示
set notitle
" マクロ実行中などの画面再描画を行わない
" set lazyredraw
" エラー時の音とビジュアルベルの抑制
set noerrorbells
set novisualbell
set visualbell t_vb=
" Windowsでディレクトリパスの区切り文字表示に / を使えるようにする
set shellslash
" 行番号表示
set number
" 括弧の対応表示時間
set showmatch matchtime=1
" 画面最後の行をできる限り表示する
set display=lastline
" Tab、行末の半角スペースを明示的に表示する
set list
set listchars=tab:^\ ,trail:~
" 長い行を折り返す
set wrap
" 折りたたみの初期値を100に（折りたたみ無し）
set foldlevel=100
" 折りたたみの種類はシンタックスキーワードで認識させる
set fdm=syntax

"----------------------------------------
" ステータスラインの設定
"----------------------------------------

" コマンドラインの高さ
" set cmdheight=2
set laststatus=2
" コマンドをステータス行に表示
set showcmd

"----------------------------------------
" インデントの設定
"----------------------------------------

" タブを設定
set ts=2 sw=2 sts=2
" タブの代わりに ts 分のスペースを挿入する
set expandtab
set smarttab
set shiftround
" 自動的にインデントする
set autoindent
set smartindent
" Cインデントの設定
set cinoptions+=:0
" カーソルキーで行末／行頭の移動可能に設定
set whichwrap=b,s,[,],<,>
" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
" □や○の文字があってもカーソル位置がずれないようにする
set ambiwidth=double

"----------------------------------------
" 編集の設定
"----------------------------------------

" クリップボードを共有
set clipboard+=unnamed
" 8進数を無効にする。<C-a>,<C-x>に影響する
set nrformats-=octal
" キーコードやマッピングされたキー列が完了するのを待つ時間(ミリ秒)
set timeout timeoutlen=3000 ttimeoutlen=100
" 編集結果非保存のバッファから、新しいバッファを開くときに警告を出さない
set hidden
" 日本語の行の連結時には空白を入力しない
set formatoptions+=mM
" Visual blockモードでフリーカーソルを有効にする
"set virtualedit=block
" コマンドライン補完するときに強化されたものを使う
set wildmenu

"----------------------------------------
" 検索の設定
"----------------------------------------

" 検索の時に大文字小文字を区別しない
" ただし大文字小文字の両方が含まれている場合は大文字小文字を区別する
set ignorecase
set smartcase
" 検索時にファイルの最後まで行ったら最初に戻る
set wrapscan
" インクリメンタルサーチ
set incsearch
" 検索文字の強調表示
set hlsearch
" <ESC>を二回押したら検索をキャンセル
nmap <Esc><Esc> :nohlsearch<CR><Esc>

"----------------------------------------
" バックアップの設定
"----------------------------------------

" ファイルの上書きの前にバックアップを作る/作らない
" set writebackupを指定してもオプション 'backup' がオンでない限り、
" バックアップは上書きに成功した後に削除される。
set nowritebackup
" バックアップ/スワップファイルを作成する/しない
set nobackup

"----------------------------------------
" 履歴の設定
"----------------------------------------

" ヒストリの保存数
set history=50
" ファイルを開いたら前回のカーソル位置へ移動
augroup vimrcEx
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line('$') | exe "normal! g`\"" | endif
augroup END
" .*.un~ ファイルを作らない様にする。
" >= 7.4.227
set noundofile

"----------------------------------------
" その他の設定
"----------------------------------------

"--
" diff/patch
"--

" vimdiffの色設定
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=22
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=52
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17
highlight DiffText   cterm=bold ctermfg=10 ctermbg=21

" 現バッファの差分表示(変更箇所の表示)
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
" ファイルまたはバッファ番号を指定して差分表示。#なら裏バッファと比較
command! -nargs=? -complete=file Diff if '<args>'=='' | browse vertical diffsplit|else| vertical diffsplit <args>|endif
" パッチコマンド
set patchexpr=MyPatch()
function! MyPatch()
   call system($VIM."\\'.'patch -o " . v:fname_out . " " . v:fname_in . " < " . v:fname_diff)
endfunction

"--
" Smarty 用のファイルタイプ設定
"--
"au BufRead,BufNewFile *.html set filetype=smarty
"au BufRead,BufNewFile *.tmpl set filetype=smarty
"au BufRead,BufNewFile *.inc  set filetype=smarty

"--
" 各言語の文法チェック＆固有の定義
"--
" Ruby
au Filetype ruby :map <C-n> <ESC>:!ruby -cW%<CR>
au FileType ruby setlocal makeprg=ruby\ -c\ %
au FileType ruby setlocal errorformat=%m\ in\ %f\ on\ line\ %l
let ruby_folding=1
" PHP
au Filetype php  :map <C-n> <ESC>:!php -l%<CR>
au FileType php setlocal makeprg=php\ -l\ %
au FileType php setlocal errorformat=%m\ in\ %f\ on\ line\ %l
let php_sql_query=1
let php_htmlInStrings=1
let php_noShortTags=1
let php_folding=1
" Golang
if $GOROOT != ''
  set rtp+=$GOROOT/misc/vim
endif
" CoffeeScript
au BufRead,BufNewFile,BufReadPre *.coffee set filetype=coffee
autocmd FileType coffee setlocal sw=2 sts=2 ts=2 et
" Java
" Eclim Settings.
autocmd FileType java nnoremap <silent> <buffer> <leader>i :JavaImport<cr>
autocmd FileType java nnoremap <silent> <buffer> <leader>d :JavaDocSearch -x declarations<cr>
autocmd FileType java nnoremap <silent> <buffer> <cr> :JavaSearchContext<cr>
autocmd FileType java let g:EclimJavaSearchSingleResult = 'edit'

"----------------------------------------
" キーマップの設定
"----------------------------------------
"----------------------------------------
" ノーマルモード
"----------------------------------------
" ヘルプ検索
nnoremap <F1> K
" 現在開いているvimスクリプトファイルを実行
nnoremap <F8> :source %<CR>
" 強制全保存終了を無効化
nnoremap ZZ <Nop>
" カーソルを j k では表示行で移動する。物理行移動は<C-n>,<C-p>
" キーボードマクロには物理行移動を推奨
" h l は行末、行頭を超えることが可能に設定(whichwrap)
nnoremap <Down> gj
nnoremap <Up>   gk
nnoremap h <Left>zv
nnoremap j gj
nnoremap k gk
nnoremap l <Right>zv
" .vimrc をコマンド<Space> - . で開く。
nnoremap <Space>. :<C-u>tabedit $MYVIMRC<CR>
" tagsジャンプの時に複数ある時は一覧表示
nnoremap <C-]> g<C-]>

"----------------------------------------
" 挿入モード
"----------------------------------------

"----------------------------------------
" ビジュアルモード
"----------------------------------------

"----------------------------------------
" コマンドモード
"----------------------------------------
