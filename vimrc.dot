"========================================
" .vimrc
" author: m.fukui
"========================================
set nocompatible
"----------------------------------------
" 内部エンコード指定
"----------------------------------------
set encoding=utf-8
set fileencodings=iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932,utf-8,ucs-bom
set fileformats=unix,dos,mac
"----------------------------------------
" help言語設定
"----------------------------------------
set helplang=ja

"----------------------------------------
" ユーザーランタイムパス設定
"----------------------------------------
if isdirectory($HOME . '/.vim')
  let $MY_VIMRUNTIME = $HOME.'/.vim'
elseif isdirectory($HOME . '\vimfiles')
  let $MY_VIMRUNTIME = $HOME.'\vimfiles'
elseif isdirectory($VIM . '\vimfiles')
  let $MY_VIMRUNTIME = $VIM.'\vimfiles'
endif

"----------------------------------------
" システム共通設定
"----------------------------------------
source ~/.vim/.vim.common

"----------------------------------------
" 各種プラグイン設定
"----------------------------------------

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#rc(expand('~/.vim/bundle/'))
endif
" originalrepos on github
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc'
"NeoBundle 'VimClojure'
"NeoBundle 'Shougo/vimshell'
"NeoBundle 'Shougo/unite.vim'
"NeoBundle 'Shougo/neocomplcache'

" snippet 関連の設定
"NeoBundle 'Shougo/neosnippet'
"NeoBundle 'honza/snipmate-snippets'
"let g:neosnippet#snippets_directory = '~/.vim/bundle/snipmate-snippets/snippets'
" Plugin key-mappings.
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" SuperTab like snippets behavior.
"imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" For snippet_complete marker.
"if has('conceal')
"  set conceallevel = 2 concealcursor = i
"endif

"NeoBundle 'jpalardy/vim-slime'

" colorscheme の設定
" solarized カラースキーム
"NeoBundle 'altercation/vim-colors-solarized'
" mustang カラースキーム
"NeoBundle 'croaker/mustang-vim'
" wombat カラースキーム
"NeoBundle 'jeffreyiacono/vim-colors-wombat'
" jellybeans カラースキーム
"NeoBundle 'nanotech/jellybeans.vim'
" lucius カラースキーム
"NeoBundle 'vim-scripts/Lucius'
" zenburn カラースキーム
"NeoBundle 'vim-scripts/Zenburn'
" mrkn256 カラースキーム
"NeoBundle 'mrkn/mrkn256.vim'
" railscasts カラースキーム
"NeoBundle 'jpo/vim-railscasts-theme'
" pyte カラースキーム
"NeoBundle 'therubymug/vim-pyte'
" molokai カラースキーム
NeoBundle 'tomasr/molokai'
" unite で一覧選択できるようにする。
"NeoBundle 'ujihisa/unite-colorscheme'
" 既定値の設定
set t_Co=256
colorscheme molokai

" status line のカスタマイズ
" power-line の設定
NeoBundle 'Lokaltog/vim-powerline'
" スペシャルシンボルを使わない
let g:Powerline_symbols = 'compatible'
" シンボルを上書きする
let g:Powerline_symbols_override = {
\ 'LINE': 'Caret'
\ }
" モード名を上書きする
let g:Powerline_mode_n  = 'normal'
let g:Powerline_mode_i  = 'insert'
let g:Powerline_mode_R  = 'replace'
let g:Powerline_mode_v  = 'visual'
let g:Powerline_mode_V  = 'visual-line'
let g:Powerline_mode_cv = 'visual-block'
let g:Powerline_mode_s  = 'select'
let g:Powerline_mode_S  = 'select-line'
let g:Powerline_mode_cs = 'select-block'
" ファイルへの相対パスを表示する
let g:Powerline_stl_path_style = 'relative'

" NERDTree （エクスプローラ）
" NeoBundle 'scrooloose/nerdtree'
" syntastic （シンタックスチェック）
"NeoBundle 'scrooloose/syntastic'
" smartchr （キー入力補完）
"NeoBundle 'kana/vim-smartchr'
" = 入力時に両端に半角空白
"inoremap <expr> = smartchr#loop(' = ', ' == ', ' === ', '=')

" HTML/CSS coding helper
NeoBundle 'mattn/zencoding-vim'
" 言語別に対応させる
let g:user_zen_settings  =  {
      \  'lang' : 'ja',
      \  'indentation' :'  ',
      \  'html' : {
      \    'filters' : 'html',
      \  },
      \  'css' : {
      \    'filters' : 'fc',
      \  },
      \}

" expand to text object.
"NeoBundle 'taichouchou2/surround.vim'

" open a browser
" NeoBundle 'open-browser.vim'
" カーソル下のURLをブラウザで開く
" nmap <Leader>o <Plug>(openbrowser-open)
" vmap <Leader>o <Plug>(openbrowser-open)
" google さんに聞く
" nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>

" スクリプト内でwebapiを実行できるようにする
"NeoBundle 'mattn/webapi-vim'

" ファイル保存時にブラウザを自動リロード
" NeoBundle 'tell-k/vim-browsereload-mac'
" リロード後に戻ってくるアプリ
" let g:returnApp  =  "mintty"
" nmap <Space>bc :ChromeReloadStart<CR>
" nmap <Space>bC :ChromeReloadStop<CR>
" nmap <Space>bf :FirefoxReloadStart<CR>
" nmap <Space>bF :FirefoxReloadStop<CR>
" nmap <Space>bs :SafariReloadStart<CR>
" nmap <Space>bS :SafariReloadStop<CR>
" nmap <Space>bo :OperaReloadStart<CR>
" nmap <Space>bO :OperaReloadStop<CR>
" nmap <Space>ba :AllBrowserReloadStart<CR>
" nmap <Space>bA :AllBrowserReloadStop<CR>

" CSS3 syntax
"NeoBundle 'hail2u/vim-css3-syntax'
" HTML5 syntax
"NeoBundle 'taichouchou2/html5.vim'
" JavaScript syntax
"NeoBundle 'taichouchou2/vim-javascript' " jQuery syntax追加
" sass コンパイル、compass 関連の操作
" 有効とするためには sass が事前に必要
"NeoBundle 'AtsushiM/sass-compile.vim'
" sass の保存時に自動コンパイル
"let g:sass_compile_auto   =  1
"let g:sass_compile_cdloop =  5
"let g:sass_compile_cssdir =  ['css', 'stylesheet']
"let g:sass_compile_file   =  ['scss', 'sass']
"let g:sass_started_dirs   =  []
" less, sass のインデントを設定
"autocmd FileType less,sass setlocal sw = 2 sts = 2 ts = 2 et
"autocmd BufWritePost *.sass SassCompile

" CoffeeScript syntax
"NeoBundle 'kchmck/vim-coffee-script'
" vimにcoffeeファイルタイプを認識させる
"au BufRead,BufNewFile,BufReadPre *.coffee   set filetype = coffee
" インデントを設定
"autocmd FileType coffee setlocal sw = 2 sts = 2 ts = 2 et
" 保存時に自動コンパイル
"autocmd BufWritePost *.coffee silent CoffeeMake! -cb | cwindow | redraw!

" Quickrun
NeoBundle 'thinca/vim-quickrun'
" PHPUnitに関する設定
" ref: http://www.karakaram.com/quickrun-phpunit
" Filetypeを新しく定義
augroup QuickRunPHPUnit
  autocmd!
  autocmd BufWinEnter,BufNewFile *Test.php set filetype=phpunit
augroup END
" vimprocをrunnerに定義（非同期実行用）
let g:quickrun_config = {}
let g:quickrun_config['_'] = {}
let g:quickrun_config['_']['runner'] = 'vimproc'
let g:quickrun_config['_']['runner/vimproc/updatetime'] = 100
" PHPunit実行後の結果表示
let g:quickrun_config['phpunit'] = {}
let g:quickrun_config['phpunit']['outputter/buffer/split'] = 'vertical 35'
let g:quickrun_config['phpunit']['command'] = 'php'
let g:quickrun_config['phpunit']['cmdopt'] = 'D:/ProgramData/PHP/PEAR/phpunit'
let g:quickrun_config['phpunit']['exec'] = '%c %o `cygpath -m %s`'

"----------------------------------------
" 一時設定
"----------------------------------------
set notitle

"----------------------------------------
" その他設定
"----------------------------------------
